{"version":3,"file":"contentModalPaste.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,YAAY,mCAAmC;AAC/C,YAAY,sDAAsD;AAClE,YAAY,WAAW;AACvB,YAAY,oBAAoB;AAChC,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR,MAAM;AACN;AACA;AACA;AACA;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,wCAAwC;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,oBAAoB,WAAW,YAAY;AACrF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,cAAc;AACd,yCAAyC,kBAAkB,WAAW,YAAY;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA","sources":["webpack://my-webpack-project/./src/content/modalPasteViewer/contentModalPaste.ts"],"sourcesContent":["// import classNames from 'classnames';\n// import IconClose from '../../assets/icon/IconClose.svg';\n// import IconPaste from '../../assets/icon/IconPaste.svg';\n// import IconPlus from '../../assets/icon/IconPlus.svg';\n// import renderPageOne from '../../screens/OneScreenCopyModal/OneScreenCopyModal';\n// import renderPageTwo from '../../screens/TwoScreenCopyModal/TwoScreenCopyModal';\n// import { IconService } from '../../services/Icon.service';\n// import { MenuLeftNavbar, TypePasteViewers } from '../../type/components.dto';\n// import { EntitiesType, RequestForPasteViewerType, ViewerType } from '../../type/entities.dto';\n// import { IconType } from '../../type/icon.dto';\n// import { createElementNode } from '../../utils/components';\n// import { EntitiesService } from './../../services/Entities.service';\n// import styles from './contentModalPaste.scss';\n// const documentBody = document.body\n// const clearBeforeNode = () => {\n//   const nodes = document.querySelectorAll('.exNeolant')\n//   nodes.forEach(element => {\n//     element.remove();\n//   });\n// }\n// clearBeforeNode()\n// const deleteView = (id: string) => {\n//   chrome.storage.local.get([\"viewersState\"], function (result) {\n//     const allView = result.viewersState && JSON.parse(result.viewersState)\n//     const saveViewersStorage = allView.filter((item: any) => item.Id !== id)\n//     chrome.storage.local.set({\n//       viewersState: JSON.stringify(saveViewersStorage)\n//     }, function () {\n//       console.log(\"Данные сохранены\");\n//     });\n//   });\n// }\n// const glEntitiesFromPaste = new useState<EntitiesType[]>([], () => {\n//   insertContent()\n//   renderShowLoading()\n// })\n// const glCurrentRightPage = new useState<string>('1', () => { })\n// const glViewerForPaste = new useState<ViewerType[]>([], () => {\n//   insertContent()\n// })\n// const glIcons = new useState<IconType[]>([], () => {\n//   insertContent()\n// })\n// const changeSelectedToggleiewer = (id: string) => {\n//   glViewerForPaste.update(glViewerForPaste.value.map(item => {\n//     if (item.Id === id) {\n//       item.isSelected = !item?.isSelected\n//     }\n//     return item\n//   }))\n// }\n// const changeOrderViewerInEntities = (id: string, order: number) => {\n//   const newViewers = glViewerForPaste.value.map(item => {\n//     if (item.Id === id) {\n//       item.order = order\n//     }\n//     return item\n//   })\n//   glViewerForPaste.update(newViewers)\n// }\n// chrome.runtime.sendMessage({\n//   action: 'getEntities',\n//   payload: window.location.origin\n// })\n// const fetchIcons = async () => {\n//   try {\n//     const response = await IconService.getIcons()\n//     glIcons.update(response)\n//   } catch (error) {\n//   }\n// }\n// fetchIcons()\n// chrome.runtime.onMessage.addListener(\n//   function (request, sender, sendResponse) {\n//     if (request.action === 'postEntitiesForPasteInsert') {\n//       glEntitiesFromPaste.update(request.payload)\n//     }\n//   }\n// );\n// chrome.storage.local.get([\"viewersState\"], function (result) {\n//   const allView = result.viewersState && JSON.parse(result.viewersState)\n//   const saveViewersStorage: ViewerType[] = Array.isArray(allView) ? allView : []\n//   glViewerForPaste.update(saveViewersStorage)\n// });\n// chrome.storage.onChanged.addListener((changes, namespace) => {\n//   for (let [key, { oldValue, newValue }] of Object.entries(changes)) {\n//     if (!newValue) return\n//     const viewers = JSON.parse(newValue)\n//     glViewerForPaste.update(viewers)\n//   }\n// });\n// chrome.runtime.onMessage.addListener(\n//   function (request, sender, sendResponse) {\n//     if (request.actions === 'isShowModal') {\n//       if (request.payload) {\n//         modalWrapepr.classList.add(styles.modalWrapper__active)\n//         insertContent()\n//       } else {\n//         modalWrapepr.classList.remove(styles.modalWrapper__active)\n//       }\n//     }\n//   }\n// );\n// const modalWrapepr = createElementNode('div', [styles.modalWrapper, styles.modalWrapper__active])\n// const modal = createElementNode('div', [styles.modal])\n// const wrapper = createElementNode('div', [styles.wrapperModal])\n// const loadingModal = createElementNode('div')\n// function renderShowLoading() {\n//   loadingModal.className = classNames(styles.modalLoading, {\n//     [styles.modalLoading__show]: !glEntitiesFromPaste?.value?.length\n//   })\n//   if (glEntitiesFromPaste?.value?.length) {\n//     setTimeout(() => {\n//       loadingModal.remove()\n//     }, 1000)\n//   }\n//   loadingModal.innerHTML = 'Загрузка...'\n// }\n// renderShowLoading()\n// wrapper.append(loadingModal)\n// const wrapperLeft = createElementNode('div', [styles.wrapperLeft])\n// const navbarUl = createElementNode('ul', [styles.navbar__menu])\n// const ulContainer = createElementNode('ul', [styles.list])\n// const wrapperPageOne = createElementNode('div', [styles.wrapperPageOne])\n// const wrapperRight = createElementNode('div', [styles.wrapperRight])\n// const top = createElementNode('img', [styles.top])\n// modalWrapepr.classList.add('exNeolant')\n// const leftMenuConfig: MenuLeftNavbar[] = [\n//   {\n//     id: '1',\n//     label: 'Виды в текущем классе',\n//     title: IconPlus\n//   },\n//   {\n//     id: '2',\n//     label: 'Коппировать',\n//     title: IconPaste\n//   }\n// ]\n// const renderLeftMenu = () => {\n//   leftMenuConfig.forEach((item, i) => {\n//     const categoryItem = createElementNode('li', [styles.navbar__item])\n//     categoryItem.onclick = () => {\n//       insertContent((i + 1).toString())\n//       glCurrentRightPage.update((i + 1).toString())\n//     }\n//     const categoryItemLink = createElementNode('div', [styles.navbar__link])\n//     const categoryItemLink_img = createElementNode('img', [styles.navbar__link_img])\n//     categoryItemLink_img.setAttribute('src', item.title)\n//     categoryItemLink.append(categoryItemLink_img)\n//     categoryItem.append(categoryItemLink)\n//     const label = document.createElement('span')\n//     label.innerText = item.label\n//     categoryItemLink.append(label)\n//     navbarUl.append(categoryItem)\n//   })\n//   wrapperLeft.append(navbarUl)\n// }\n// renderLeftMenu()\n// wrapper.append(wrapperLeft)\n// wrapper.append(wrapperRight)\n// top.onclick = () => {\n//   modalWrapepr.classList.toggle(styles.modalWrapper__active)\n//   setTimeout(() => { clearBeforeNode() }, 1000)\n// }\n// top.setAttribute('src', IconClose)\n// modal.append(top)\n// modal.append(wrapper)\n// modalWrapepr.append(modal)\n// documentBody.append(modalWrapepr)\n// const addStateViewers = (view: ViewerType) => {\n//   chrome.storage.local.get([\"viewersState\"], function (result) {\n//     const allView = result.viewersState && JSON.parse(result.viewersState)\n//     const saveViewersStorage = Array.isArray(allView) ? allView : []\n//     saveViewersStorage.push(view)\n//     chrome.storage.local.set({\n//       viewersState: JSON.stringify(saveViewersStorage)\n//     }, function () {\n//       console.log(\"Данные сохранены\");\n//     });\n//   });\n// }\n// const pasteViewers = async ({\n//   glViewerForPaste,\n//   configPasteEntities,\n//   glValueIcons,\n//   settingForPaste,\n//   urlValue,\n// }: TypePasteViewers) => {\n//   const isApplySettingsCustom = configPasteEntities.find(_ => _.id === '3').value\n//   const isApplyIconCustom = configPasteEntities.find(_ => _.id === '4').value\n//   const isApplyNestedEntities = configPasteEntities.find(_ => _.id === '2').value\n//   const isApplyReWriteIconWithEdit = configPasteEntities.find(_ => _.id === '5').value || false\n//   const customSettings: Record<keyof Omit<RequestForPasteViewerType['Settings'], 'Url'>, boolean | number> = {\n//     hideInStructureOfObject: false,\n//     hideInViewingModel: false,\n//     SendParams: false,\n//     hideEmptyFields: false,\n//     viewMode: 0\n//   }\n//   settingForPaste.forEach(setting => {\n//     if (setting.id === 'viewMode') {\n//       customSettings[setting.id] = Number(setting?.value)\n//       return\n//     }\n//     customSettings[setting.id] = !!setting?.value\n//   })\n//   // @ts-ignore\n//   customSettings.Url = urlValue\n//   glEntitiesFromPaste.value.forEach(async entity => {\n//     if (!entity.isCurrent) if (!isApplyNestedEntities) return\n//     const newViewers: ViewerType[] = []\n//     const promisesListResponse: Promise<ViewerType>[] = [];\n//     glViewerForPaste.forEach(async viewer => {\n//       if (!viewer.isSelected) return\n//       const settingForPost = (isApplySettingsCustom ? { ...viewer.Settings, ...customSettings } : viewer.Settings) as RequestForPasteViewerType['Settings']\n//       const IconForPost: string = ((isApplyIconCustom && glValueIcons) ? glValueIcons : viewer.Icon)\n//       const dataPost: RequestForPasteViewerType = {\n//         Caption: viewer.Caption,\n//         Icon: IconForPost,\n//         Attributes: viewer.Attributes,\n//         Name: viewer.Name,\n//         Settings: settingForPost\n//       }\n//       const isHaveViewer = entity.Viewers.find(_ => _.Caption === viewer.Caption)\n//       // console.log(\"🚀 ~ file: contentModalPaste.ts:281 ~ newViwer ~ entity:\", entity)\n//       const newViwer = (async () => {\n//         if (isHaveViewer) {\n//           const dataCreate = {\n//             ...dataPost,\n//             Icon: (isApplyReWriteIconWithEdit && IconForPost) ? IconForPost : isHaveViewer.Icon,\n//             Id: isHaveViewer.Id\n//           }\n//           const response = await EntitiesService.changeViewerInEntities(entity.Id, dataCreate)\n//           newViewers.push(dataCreate)\n//           console.log(`Изменили вид: ${dataCreate.Caption} в классе ${entity.Name}`)\n//           // console.log(\"🚀 response add change viewer id \", response)\n//           return dataCreate\n//         } else {\n//           const response = await EntitiesService.pasteViewerInEntities(entity.Id, dataPost)\n//           newViewers.push({\n//             ...dataPost,\n//             Id: response.Id\n//           })\n//           console.log(`Создали вид: ${dataPost.Caption} в классе ${entity.Name}`)\n//           // console.log(\"🚀 response add new viewer id \", response)\n//           return {\n//             ...dataPost,\n//             Id: response.Id\n//           }\n//         }\n//       })()\n//       promisesListResponse.push(newViwer)\n//     })\n//     Promise.all(promisesListResponse).then(async (e) => {\n//       const currentOrder = [...entity.Viewers]\n//       glViewerForPaste.forEach(async viewer => {\n//         if (!viewer.isSelected) return\n//         const newViewer = e.find(item => item.Caption === viewer.Caption)\n//         const order: number = glViewerForPaste.find(_ => _.Caption === newViewer.Caption)?.order || 0\n//         currentOrder.splice(order - 1, 0, newViewer)\n//       })\n//       const orderHash: Record<string, number> = {}\n//       currentOrder.forEach((_, ind) => orderHash[_.Id] = ind)\n//       const responseOrdert = await EntitiesService.changeOrderPosition(entity.Id, orderHash)\n//     })\n//   })\n// }\n// async function insertContent(pageId?: string) {\n//   wrapperRight.innerHTML = ''\n//   wrapperRight.append(await getHtml(pageId || glCurrentRightPage.value))\n// }\n// const getHtml = async (idPage: string) => {\n//   if (idPage === '1') {\n//     const component = await renderPageOne({\n//       addStateViewers,\n//       glEntitiesFromPaste,\n//       glViewerForPaste,\n//       ulContainer,\n//       wrapperPageOne\n//     }) as unknown as Node\n//     return component\n//   }\n//   if (idPage === '2') {\n//     return renderPageTwo({\n//       changeSelectedToggleiewer,\n//       deleteView,\n//       glIcons,\n//       glViewerForPaste,\n//       modalWrapepr,\n//       pasteViewers,\n//       changeOrderViewerInEntities\n//     })\n//   }\n//   return ''\n// }\n"],"names":[],"sourceRoot":""}